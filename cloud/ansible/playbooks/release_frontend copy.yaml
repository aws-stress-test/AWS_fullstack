---
- name: Build and Deploy AWS Fullstack Application
  hosts: front-master
  gather_facts: false
  
  vars:
    app_dir: /home/ubuntu/AWS_fullstack
    release_dir: /home/ubuntu/release
    tmp_dir: /tmp/release
    health_check_url: http://localhost:3000/health

  tasks:
    - name: Fetch all branches
      command: git fetch --all
      args:
        chdir: "{{ app_dir }}"

    - name: Checkout release branch
      command: git checkout release
      args:
        chdir: "{{ app_dir }}"

    - name: Pull latest changes
      command: git pull
      args:
        chdir: "{{ app_dir }}"

    - name: Install dependencies
      command: npm install
      args:
        chdir: "{{ app_dir }}"

    - name: Build frontend
      command: npm run build
      args:
        chdir: "{{ app_dir }}"

    - name: Create temporary directory
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

    - name: Copy standalone files
      synchronize:
        src: "{{ app_dir }}/.next/standalone/"
        dest: "{{ tmp_dir }}"

    - name: Copy .next directory
      synchronize:
        src: "{{ app_dir }}/.next"
        dest: "{{ tmp_dir }}"

    - name: Copy public directory
      synchronize:
        src: "{{ app_dir }}/public"
        dest: "{{ tmp_dir }}"

    - name: Copy ecosystem config
      copy:
        src: "{{ app_dir }}/ecosystem.config.js"
        dest: "{{ tmp_dir }}/ecosystem.config.js"

    - name: Start application on master
      command: pm2 start ecosystem.config.js --env prod
      args:
        chdir: "{{ app_dir }}"

    - name: Wait for health check
      uri:
        url: "{{ health_check_url }}"
        return_content: yes
        status_code: 200
      register: health_check
      retries: 3
      delay: 5
      until: health_check.status == 200
      failed_when: health_check.status != 200

- name: Deploy to worker nodes
  hosts: front-worker
  gather_facts: false
  
  vars:
    release_dir: /home/ubuntu/release
    tmp_dir: /tmp/release

  tasks:
    - name: Ensure release directory exists
      file:
        path: "{{ release_dir }}"
        state: directory
        mode: '0755'

    - name: Sync release files to workers
      synchronize:
        src: "{{ tmp_dir }}/"
        dest: "{{ release_dir }}"
        delete: yes

    - name: Reload application
      command: pm2 reload ecosystem.config.js --env prod
      args:
        chdir: "{{ release_dir }}"

    - name: Clean up temporary directory
      file:
        path: "{{ tmp_dir }}"
        state: absent
      run_once: true
      delegate_to: "{{ groups['asg-fe-master'][0] }}"